package main

import (
	"fmt"
)
// Выражение defer добавляет вызов функции после ключевого слова defer в стеке приложения.
// Все вызовы отложенных функций фактически осуществляются при возврате из функции (после return), в которой они были добавлены, но до момента получения значения вызывающей стороной.
// Поскольку вызовы помещаются в стек, они производятся в порядке от последнего к первому.
// При вычислении выражения с defer (например, defer Add(a, b)) аргументы отложенной функции вычисляются немедленно.
// Defer может читать/писать в именованный возврат

func test() (x int) { // Возврат именованный, => можно изменить возвращаемое значение посредством отложенного вызова функции
	defer func() {
		x++
	}()
	x = 1
	return
}


func anotherTest() int { // Возврат не именованный, => невозможно изменить возвращаемое значение посредством отложенного вызова функции
	var x int
	defer func() {
		x++
	}()
	x = 1
	return x
}


func main() {
	fmt.Println(test())
	fmt.Println(anotherTest())
}